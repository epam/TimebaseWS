export declare class HdDate {
    private date;
    private nanoSeconds;
    constructor();
    constructor(date?: HdDate);
    constructor(isoString?: string);
    constructor(epochMillisNanosFraction?: Array<number>);
    constructor(epochMillis?: number);
    constructor(year?: number, month?: number, day?: number, hours?: number, min?: number, sec?: number, mili?: number, micro?: number, nano?: number);
    getDay(): number;
    getDate(): number;
    getEpochMillis(): number;
    getFullYear(): number;
    getHours(): number;
    getMicroseconds(): number;
    getMilliseconds(): number;
    getMinutes(): number;
    getMonth(): number;
    getNanoseconds(): number;
    getNanosFraction(): number;
    getSeconds(): number;
    getTimezoneOffset(): number;
    getUTCDate(): number;
    getUTCDay(): number;
    getUTCFullYear(): number;
    getUTCHours(): number;
    getUTCMicroseconds(): number;
    getUTCMilliseconds(): number;
    getUTCMinutes(): number;
    getUTCMonth(): number;
    getUTCNanoseconds(): number;
    getUTCSeconds(): number;
    getWeek(): number;
    setDate(date: number): void;
    setEpochMillis(value: number): void;
    setFullYear(year: number): void;
    setHours(hours: number): void;
    setMicroseconds(value: number): void;
    setMilliseconds(ms: number): void;
    setMinutes(min: number): void;
    setMonth(month: number): void;
    setNanoseconds(value: number): void;
    setNanosFraction(value: number): void;
    setSeconds(sec: number): void;
    setUTCDate(date: number): void;
    setUTCFullYear(year: number): void;
    setUTCMicroseconds(value: number): void;
    setUTCHours(hours: number): void;
    setUTCMilliseconds(ms: number): void;
    setUTCMinutes(min: number): void;
    setUTCMonth(month: number): void;
    setUTCNanoseconds(value: number): void;
    setUTCSeconds(sec: number): void;
    toDateString(): string;
    toHdTimeString(): string;
    toHdISOString(): string;
    toHdLocaleString(): string;
    toHdLocaleTimeString(): string;
    toHdString(): string;
    toISOString(): string;
    toJSON(): string;
    toLocaleDateString(): string;
    toLocaleFormat(format: string, locale?: string): string;
    toLocaleString(): string;
    toLocaleTimeString(): string;
    toString(): string;
    toTimeString(): string;
    toUTCString(): string;
    valueOf(): string;
    parseIso(isoFormatString: string): string;
    parseFormat(format: string, formatString: string): string;
    tryParse(arbitraryString: string): string;
    lt(hdDate: HdDate): boolean;
    lte(hdDate: HdDate): boolean;
    gt(hdDate: HdDate): boolean;
    gte(hdDate: HdDate): boolean;
    eq(hdDate: HdDate): boolean;
}
