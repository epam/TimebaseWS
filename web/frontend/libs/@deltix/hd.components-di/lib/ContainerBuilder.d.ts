import { Compiler } from './Compiler';
import { Container, Factory } from './Container';
import { IContainer, IParameters } from './ContainerInterface';
import { Definition } from './Definition/Definition';
export declare class ContainerBuilder implements IContainer {
    private compiler;
    private parameters;
    private env;
    private definitions;
    private factories;
    private loading;
    private container;
    constructor(compiler: Compiler, parameters: IParameters, env: string);
    has(id: string): boolean;
    getParameters(): IParameters;
    setParameters(parameters: IParameters): void;
    getParameter(id: string): any | null;
    getOptionalParameter(id: string): any | null;
    getParametersFor(extensionName: string): {};
    getEnv(): string;
    get<T>(id: string): T;
    getIds(): string[];
    setFactory<T>(id: string, factory: Factory<T>, shared: boolean): void;
    set<T>(id: string, inst: T): void;
    addDefinitions(...definitions: Definition<any>[]): void;
    getDefinitions(): Definition<any>[];
    findDefinition<T>(id: string): Definition<T> | undefined;
    getCompiler(): Compiler;
    removeDefinition(id: string): void;
    hasDefinition(id: string): boolean;
    getServiceIds(): string[];
    findTaggedServiceIds(name: any): string[];
    findTags(): unknown[];
    findUnusedTags(): void;
    build(): Promise<Container>;
    merge(builder: any): void;
    private createService;
    private createDecoratedFactory;
    private getDecoratorsFor;
    private getFactory;
}
