{"version":3,"file":"safe-html.pipe.js","sourceRoot":"","sources":["../../../../src/ts/pipes/safe-html.pipe.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,IAAI,EAAiB,eAAe,EAAE,MAAM,eAAe,CAAC;AACrE,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AAMzD;IACI,sBAAoB,SAAuB;QAAvB,cAAS,GAAT,SAAS,CAAc;IAAI,CAAC;IAChD,gCAAS,GAAT,UAAU,KAAU;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QAChC,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,OAAO,EAAE,CAAC;SACb;QAED,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAChE,CAAC;IARQ,YAAY;QAJxB,IAAI,CAAC;YACF,IAAI,EAAE,UAAU;SACnB,CAAC;yCAGiC,YAAY;OADlC,YAAY,CASxB;IAAD,mBAAC;CAAA,AATD,IASC;SATY,YAAY","sourcesContent":["import { Pipe, PipeTransform, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Pipe({\n    name: 'safeHtml'\n})\n\nexport class SafeHtmlPipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) { }\n    transform(value: any, ...args: any[]): any {\n        if (value == null) {\n            return '';\n        }\n\n        return this.sanitizer.sanitize(SecurityContext.HTML, value);\n    }\n}\n"]}