{"version":3,"file":"extended-textarea.component.js","sourceRoot":"","sources":["../../../../src/ts/components/extended-textarea.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { smartJoin, correctPasteString, smartSplit, smartLastIndexOf, smartIndexOf } from '../utils/utils';\nimport { AutocompleteBase } from './autocomplete-base';\n\n// tslint:disable:max-line-length\n@Component({\n    selector: 'deltix-ng-extended-textarea',\n    template: `\n        <div class=\"deltix-autocomplete\" [ngClass]=\"cssClass\">\n            <div class=\"autocomplete-container\" (mousedown)=\"onAutocompleteClick($event)\">\n                <textarea type=\"text\" spellcheck=\"spellcheck\" [(ngModel)]=\"selectedText\" [title]=\"selectedText\" (focus)=\"onFocus($event)\" (paste)=\"onPaste($event)\" (input)=\"onInput($event)\" (keyup)=\"onKeyUp($event)\" (keydown)=\"onKeyDown($event)\" (click)=\"onClick($event)\" (blur)=\"onBlur($event)\" [disabled]=\"disabled\" class=\"autocomplete-input\" [placeholder]=\"placeholder\"></textarea>\n                <button *ngIf=\"!disabled\" (click)=\"toggleDropdown($event)\" type=\"button\" class=\"autocomplete-caret-btn\"><i class=\"autocomplete-caret\"></i></button>\n                <div class=\"autocomplete-dropdown-container\" #dropdownContainer>\n                    <div class=\"autocomplete-dropdown\" *ngIf=\"!disabled\">\n                        <div class=\"autocomplete-dropdown-menu-wrapper\" *ngIf=\"isShowDropdown()\">\n                            <ul class=\"autocomplete-dropdown-menu\">\n                                <li *ngFor=\"let item of values; first as isFirst\" class=\"autocomplete-dropdown-item\" [title]=\"getTitleAttrValueForItem(item)\">\n                                    <a href=\"#\" (click)=\"select(item,$event)\" (keyup)=\"onElementKeyUp($event)\" [appAutocompleteDescription]=\"highlightTitle(item)\" [ngClass]=\"{'active':isFirst && allowSelectFirst && hasInput()}\"></a>\n                                </li>\n                            </ul>\n                            <ng-content></ng-content>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        multi: true,\n        useExisting: forwardRef(() => ExtendedTextareaComponent),\n    }]\n})\n// tslint:enable:max-line-length\nexport class ExtendedTextareaComponent extends AutocompleteBase implements OnInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n    @Input()\n    protected values: Array<any>;\n    @Input()\n    protected highlight = true;\n    @Input()\n    public disabled = false;\n    @Input()\n    public placeholder = '';\n    @Input()\n    public literal = '\"';\n    @Input()\n    protected descriptionGetter: (value: any, highlightFunc: (str: string) => string) => string | HTMLElement;\n    @Input()\n    protected stripTags = true;\n    @Input()\n    protected allowSelectFirst = false;\n    @Input()\n    public cssClass: string;\n    @Input()\n    public spellcheck = true;\n    @Output()\n    protected changeInput: EventEmitter<string> = new EventEmitter<string>();\n    @Output()\n    protected showDropdownChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    protected selectedValues: Array<any>;\n    protected separator = ' ';\n    protected currentInput: string;\n    protected cursorPosition: number;\n\n    @ViewChild('dropdownContainer', { static: true })\n    protected dropdownContainer: ElementRef;\n\n    constructor(element: ElementRef) {\n        super(element);\n    }\n\n    public writeValue(obj: any): void {\n        if (obj instanceof Array) {\n            this.selectedValues = obj;\n        } else {\n            this.selectedValues = [obj];\n        }\n        this.selectedText = this.prepareInput(smartJoin(this.selectedValues, this.separator, this.literal));\n    }\n\n    public onBlur(event: Event) {\n        // this._selectedText = this.getValueForItems(this._selectedValues);\n    }\n\n    public onPaste(event: ClipboardEvent) {\n        event.preventDefault();\n        event.returnValue = false;\n        const clipboardData = event.clipboardData.getData('text/plain');\n        this.selectedText = correctPasteString(clipboardData, this.separator, this.literal);\n        this.changeInput.emit(this.selectedText);\n    }\n\n    public onKeyUp(event: KeyboardEvent) {\n        if (this.inputElement.selectionStart === this.inputElement.value.length) {\n            super.onKeyUp(event);\n        } else {\n            this.updateCursorPos();\n            this.showDropdown = true;\n        }\n\n        this.selectedText = this.prepareInput(this.selectedText);\n        if (this.inputElement.value !== this.selectedText) {\n            this.inputElement.value = this.selectedText;\n        }\n\n        if (this.selectedText.length === 0) {\n            this.selectedValues.length = 0;\n            this.onChange([]);\n        } else {\n            this.onChange(smartSplit(this.selectedText, this.separator, this.literal));\n        }\n    }\n\n    public select(item: any, event: Event) {\n        super.select(item, event);\n        event.stopPropagation();\n        event.preventDefault();\n        if (this.cursorPosition != null) {\n            const pos = this.getInputPos(this.cursorPosition);\n            const v = this.getValueForItem(item, this.separator, this.literal);\n            this.selectedText = this.selectedText.substr(0, pos.left) + v + this.selectedText.substr(pos.left + pos.length);\n            setTimeout(() => {\n                this.inputElement.selectionStart = this.inputElement.selectionEnd = pos.left + v.length;\n            });\n        } else {\n            if (this.selectedValues.indexOf(item) >= 0) {\n                return;\n            }\n            this.selectedValues.push(item);\n\n        }\n        this.onChange(smartSplit(this.selectedText, this.separator, this.literal));\n        this.inputElement.focus();\n        this.showDropdown = false;\n        this.currentInput = null;\n    }\n\n    public onKeyDown(event: KeyboardEvent) {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    public onClick(event: MouseEvent) {\n        this.updateCursorPos();\n        this.showDropdown = true;\n    }\n\n    protected initInputElement() {\n        if (this.inputElement == null) {\n            this.inputElement = this.element.nativeElement.querySelector('textarea');\n        }\n    }\n\n    protected getTitleForItem(item: any): string {\n        if (item != null && typeof this.descriptionGetter === 'function') {\n            return this.descriptionGetter.call(null, item, (str: string) => {\n                if (this.isTrue(this.highlight)) {\n                    if (this.currentInput == null || this.currentInput.length === 0) {\n                        return str;\n                    }\n                    const selectedText = smartSplit(this.currentInput, this.separator, this.literal);\n                    for (let i = 0; i < selectedText.length; i++) {\n                        str = this.highlightText(str, selectedText[i]);\n                    }\n                }\n                return str;\n            });\n        }\n\n        return this.getValueForItem(item);\n    }\n\n    public onInput(event: KeyboardEvent) {\n        this.updateCursorPos();\n        if (!this.showDropdown) {\n            this.showDropdown = true;\n        }\n    }\n\n    protected updateCursorPos() {\n        this.cursorPosition = this.inputElement.selectionStart;\n        const pos = this.getInputPos(this.cursorPosition);\n        this.currentInput = this.inputElement.value.substr(pos.left, pos.length);\n        this.inputEmit(this.prepareInput(this.currentInput));\n    }\n\n    protected getInputPos(cursorPos: number): { left: number, length: number } {\n        let offsetLeft = smartLastIndexOf(this.inputElement.value.substring(0, cursorPos), this.separator, this.literal);\n        if (offsetLeft === -1) {\n            offsetLeft = 0;\n        } else {\n            offsetLeft++;\n        }\n        const t = this.inputElement.value.substring(cursorPos);\n        let offsetRight = smartIndexOf(t, this.separator, this.literal);\n        if (offsetRight === -1) {\n            offsetRight = t.length;\n        }\n\n        return { left: offsetLeft, length: cursorPos - offsetLeft + offsetRight };\n    }\n\n    protected hasInput(): boolean {\n        return this.currentInput != null && this.currentInput.trim().length !== 0;\n    }\n\n    public onFocus(event: Event) {\n        super.onFocus(event);\n        this.cursorPosition = null;\n    }\n\n    protected prepareInput(str: string): string {\n        return str.replace(/\\r?\\n|\\r/g, this.separator);\n    }\n}\n"]}