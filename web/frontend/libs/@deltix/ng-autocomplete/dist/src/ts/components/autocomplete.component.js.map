{"version":3,"file":"autocomplete.component.js","sourceRoot":"","sources":["../../../../src/ts/components/autocomplete.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { AutocompleteBase } from './autocomplete-base';\n\n// tslint:disable:max-line-length\n@Component({\n    selector: 'deltix-ng-autocomplete',\n    template: `\n        <div class=\"deltix-autocomplete\" [ngClass]=\"cssClass\">\n            <div class=\"autocomplete-container\" (mousedown)=\"onAutocompleteClick($event)\">\n                <input type=\"text\" class=\"autocomplete-input\" spellcheck=\"spellcheck\" [(ngModel)]=\"selectedText\" [title]=\"selectedText\" [disabled]=\"disabled\" [maxlength]=\"maxlength\" [placeholder]=\"placeholder\" (focus)=\"onFocus($event)\" (input)=\"onInput($event)\" (keyup)=\"onKeyUp($event)\" (blur)=\"onBlur($event)\" (click)=\"onInputClick($event)\">\n                <button *ngIf=\"dropdown && !disabled\" (click)=\"toggleDropdown($event)\" type=\"button\" class=\"autocomplete-caret-btn\"><i class=\"autocomplete-caret\"></i></button>\n                <div class=\"autocomplete-dropdown-container\" #dropdownContainer>\n                    <div class=\"autocomplete-dropdown\" *ngIf=\"!disabled\">\n                        <div class=\"autocomplete-dropdown-menu-wrapper\" *ngIf=\"isShowDropdown()\">\n                            <ul class=\"autocomplete-dropdown-menu\">\n                                <li *ngFor=\"let item of values\" class=\"autocomplete-dropdown-item\" [class.autocomplete-active]=\"isSelected(item)\" [title]=\"getTitleAttrValueForItem(item)\">\n                                    <a href=\"#\" (click)=\"select(item,$event)\" (keyup)=\"onElementKeyUp($event)\" [appAutocompleteDescription]=\"highlightTitle(item)\">\n                                    </a>\n                                </li>\n                                <ng-content></ng-content>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        multi: true,\n        useExisting: forwardRef(() => AutocompleteComponent),\n    }]\n})\n// tslint:enable:max-line-length\nexport class AutocompleteComponent extends AutocompleteBase implements OnInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n    @Input()\n    protected values: Array<any>;\n    @Input()\n    protected highlight = true;\n    @Input()\n    public dropdown = false;\n    @Input()\n    public disabled = false;\n    @Input()\n    protected required = false;\n    @Input()\n    public placeholder = '';\n    @Input()\n    protected valueGetter: (value: any) => string;\n    @Input()\n    protected descriptionGetter: (value: any, highlightFunc: (str: string) => string) => string | HTMLElement;\n    @Input()\n    protected stripTags = true;\n    @Input()\n    protected free = false;\n    @Input()\n    public maxlength: number;\n    @Input()\n    public spellcheck = true;\n    @Input()\n    public cssClass: string;\n    @Output()\n    protected changeInput: EventEmitter<string> = new EventEmitter<string>();\n    @Output()\n    protected showDropdownChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    protected selectedValue: any;\n\n    @ViewChild('dropdownContainer', { static: true })\n    protected dropdownContainer: ElementRef;\n\n    constructor(element: ElementRef) {\n        super(element);\n    }\n\n    public writeValue(obj: any): void {\n        this.selectedValue = obj;\n        this.selectedText = this.getValueForItem(this.selectedValue);\n    }\n\n    public onBlur(event: Event) {\n        if (this.free && !this.dropdown) {\n            return;\n        }\n        this.selectedText = this.getValueForItem(this.selectedValue);\n    }\n\n    public onKeyUp(event: KeyboardEvent) {\n        super.onKeyUp(event);\n\n        if (this.selectedText.length === 0 && this.required + '' !== 'true') {\n            this.selectedValue = null;\n            this.onChange(null);\n        }\n    }\n\n    public isSelected(value: any): boolean {\n        if (this.selectedValue === value) {\n            return true;\n        } else if (typeof this.valueGetter === 'function') {\n            const selectedValueKey = this.valueGetter(this.selectedValue);\n            const valueKey = this.valueGetter(value);\n            return selectedValueKey === valueKey;\n        }\n    }\n\n    public select(item: any, event: Event) {\n        super.select(item, event);\n        event.stopPropagation();\n        event.preventDefault();\n        this.selectedText = this.getValueForItem(item);\n        this.selectedValue = item;\n        this.onChange(item);\n        this.showDropdown = false;\n    }\n\n    public onInput(event: KeyboardEvent) {\n        if (this.free && this.selectedValue != null && this.selectedText !== this.getValueForItem(this.selectedValue)) {\n            this.selectedValue = null;\n            this.onChange(this.selectedValue);\n        }\n        super.onInput(event);\n    }\n\n    public onInputClick(event: Event) {\n        if (!this.dropdown) {\n            return;\n        }\n        this.showDropdown = !this.showDropdown;\n    }\n\n    public onFocus(event: Event) {\n        if (this.dropdown) {\n            return;\n        }\n        super.onFocus(event);\n    }\n}\n"]}