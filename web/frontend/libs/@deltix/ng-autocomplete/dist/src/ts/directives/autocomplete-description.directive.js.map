{"version":3,"file":"autocomplete-description.directive.js","sourceRoot":"","sources":["../../../../src/ts/directives/autocomplete-description.directive.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,KAAK,EAA4B,MAAM,eAAe,CAAC;AACvF,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AAEzD,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AAKzD;IAKI,0CAAmB,OAAgC,EAAU,SAAuB;QAAjE,YAAO,GAAP,OAAO,CAAyB;QAAU,cAAS,GAAT,SAAS,CAAc;IAAI,CAAC;IAGzF,sBAAY,sDAAQ;aAApB;YACI,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;gBAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACxD;YACD,OAAO,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;;;OAAA;IAED,sDAAW,GAAX,UAAY,OAAsB;QAC9B,IAAI,OAAO,CAAC,4BAA4B,CAAC,IAAI,IAAI;YAC7C,OAAO,CAAC,4BAA4B,CAAC,CAAC,YAAY,KAAK,OAAO,CAAC,4BAA4B,CAAC,CAAC,aAAa,EAAE;YAC5G,IAAI,OAAO,CAAC,4BAA4B,CAAC,CAAC,YAAY,YAAY,WAAW,EAAE;gBAC3E,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,GAAG,EAAE,CAAC;gBAC1C,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC,YAAY,CAAC,CAAC;aAC9F;iBAAM;gBACH,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ;qBAC/C,SAAS,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC,YAAY,CAAC,CAAC;aACtE;SACJ;IACL,CAAC;IAzBQ;QAAR,KAAK,EAAE;;wFAAkD;IADjD,gCAAgC;QAH5C,SAAS,CAAC;YACP,QAAQ,EAAE,8BAA8B;SAC3C,CAAC;yCAM8B,UAAU,EAAkC,YAAY;OAL3E,gCAAgC,CA2B5C;IAAD,uCAAC;CAAA,AA3BD,IA2BC;SA3BY,gCAAgC","sourcesContent":["import { Directive, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { SafeHtmlPipe } from './../pipes/safe-html.pipe';\n\n@Directive({\n    selector: '[appAutocompleteDescription]'\n})\nexport class AutocompleteDescriptionDirective implements OnChanges {\n    @Input() appAutocompleteDescription: string | HTMLElement;\n\n    private safeHtmlPipe: SafeHtmlPipe;\n\n    constructor(public element: ElementRef<HTMLElement>, private sanitizer: DomSanitizer) { }\n\n\n    private get safeHtml() {\n        if (this.safeHtmlPipe == null) {\n            this.safeHtmlPipe = new SafeHtmlPipe(this.sanitizer);\n        }\n        return this.safeHtmlPipe;\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes['appAutocompleteDescription'] != null &&\n            changes['appAutocompleteDescription'].currentValue !== changes['appAutocompleteDescription'].previousValue) {\n            if (changes['appAutocompleteDescription'].currentValue instanceof HTMLElement) {\n                this.element.nativeElement.innerHTML = '';\n                this.element.nativeElement.appendChild(changes['appAutocompleteDescription'].currentValue);\n            } else {\n                this.element.nativeElement.innerHTML = this.safeHtml\n                    .transform(changes['appAutocompleteDescription'].currentValue);\n            }\n        }\n    }\n}\n"]}