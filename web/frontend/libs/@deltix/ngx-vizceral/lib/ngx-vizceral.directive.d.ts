import VizceralGraph from '@deltix/vizceral';
import { OnInit, AfterViewInit, OnDestroy, DoCheck, OnChanges, EventEmitter, NgZone, ElementRef, SimpleChanges } from '@angular/core';
import { VizceralSize } from './ngx-vizceral.models';
import * as i0 from "@angular/core";
export declare class VizceralDirective implements OnInit, AfterViewInit, OnDestroy, DoCheck, OnChanges {
    private zone;
    private elementRef;
    viewChanged: EventEmitter<any>;
    viewUpdated: EventEmitter<any>;
    objectHighlighted: EventEmitter<any>;
    nodeContextSizeChanged: EventEmitter<any>;
    matchesFound: EventEmitter<any>;
    nodeUpdated: EventEmitter<any>;
    objectHovered: EventEmitter<any>;
    definitions: any;
    traffic: any;
    view: any;
    showLabels: boolean;
    filters: any;
    objectToHighlight: any;
    match: any;
    modes: any;
    allowDraggingOfNodes: boolean;
    styles: any;
    targetFramerate: any;
    initialSize: {
        width: number;
        height: number;
    };
    useCurrentInitialSize: boolean;
    config: any;
    private ro;
    private instance;
    private initialWidth;
    private initialHeight;
    private configDiff;
    private defaultProps;
    constructor(zone: NgZone, elementRef: ElementRef);
    set size(size: VizceralSize);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    getPerformanceNow(): number | null;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    ngOnChanges(changes: SimpleChanges): void;
    vizceral(): VizceralGraph;
    setView(view: string[]): void;
    setSize(width: number, height: number): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<VizceralDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<VizceralDirective, "[vizceral]", ["ngxVizceral"], { "definitions": "definitions"; "traffic": "traffic"; "view": "view"; "showLabels": "showLabels"; "filters": "filters"; "objectToHighlight": "objectToHighlight"; "match": "match"; "modes": "modes"; "allowDraggingOfNodes": "allowDraggingOfNodes"; "styles": "styles"; "targetFramerate": "targetFramerate"; "initialSize": "initialSize"; "useCurrentInitialSize": "useCurrentInitialSize"; "config": "vizceral"; "size": "size"; }, { "viewChanged": "viewChanged"; "viewUpdated": "viewUpdated"; "objectHighlighted": "objectHighlighted"; "nodeContextSizeChanged": "nodeContextSizeChanged"; "matchesFound": "matchesFound"; "nodeUpdated": "nodeUpdated"; "objectHovered": "objectHovered"; }, never>;
}
