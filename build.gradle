buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:5.3.2.1'
    }
}

plugins {
    id 'base'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.springframework.boot' version '2.2.7.RELEASE' apply false
    id "com.moowork.node" version "1.3.1" apply false
    id "com.moowork.grunt" version "1.3.0" apply false
    id "com.webcohesion.enunciate" version "2.12.1"apply false
    id "io.freefair.lombok" version "5.3.3.3" apply false

    id 'com.github.jk1.dependency-license-report' version '1.16'
}

apply from: "$rootDir/gradle/Release.gradle"
apply from: "$rootDir/gradle/tools.gradle"

ext {
    dockerImages = [
            main   : 'src/main/docker/Dockerfile'
            //openjdk : 'src/main/docker/openjdk/Dockerfile',
    ]
}

def javaProjects = subprojects.findAll { project -> project.subprojects.empty }

configure(javaProjects) {

    apply plugin: 'java-library'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.owasp.dependencycheck'

    apply from: "$rootDir/gradle/DockerSupport.gradle"

    repositories {
        mavenCentral()

        // for dependency: Gson Extras 2.8.5
        maven {
            url "https://artifactory.cronapp.io/public-release/"
        }
    }

    dependencyManagement {
        imports {
            // Keeps netty-related dependencies consistent
            mavenBom 'io.netty:netty-bom:4.1.68.Final'
        }
    }


    configurations.all {
        resolutionStrategy {
            // Disable this line on case of version conflict and then run :dependency task OR execute build with --scan option
            failOnVersionConflict()
        }

        // same api defined in javax.annotation-api-*
        exclude group: 'jakarta.annotation', module: 'jakarta.annotation-api' // GNU license
    }

    dependencyCheck {
        if (project.hasProperty("failOnHighCVSS") && project.getProperty("failOnHighCVSS") == 'true') {
            failBuildOnCVSS = 7
        }
        suppressionFile = file("$rootDir/dependency-check-suppression-file.xml")
        analyzers {
            assemblyEnabled = false
        }
    }

    compileJava.options.encoding = 'UTF-8'
    sourceCompatibility = 11
    targetCompatibility = 11
    // Defines versions of dependencies to be used by subprojects
    // https://github.com/spring-gradle-plugins/dependency-management-plugin#dependency-management-dsl
    dependencyManagement {

        dependencies {
            // Enunciate annotations
            dependency 'com.webcohesion.enunciate:enunciate-core-annotations:2.12.1'

            dependency "org.finos.timebase-ce:timebase-client:${timebaseVersion}"
            dependency "org.finos.timebase-ce:timebase-api:${timebaseVersion}"
            dependency "org.finos.timebase-ce:timebase-pub:${timebaseVersion}"
            dependency "org.finos.timebase-ce:timebase-aerondirect:${timebaseVersion}"

            dependency "com.epam.deltix:containers:3.1.2"

            dependency "com.epam.deltix:timebase-lang:${commonsVersion}"
            dependency "com.epam.deltix:timebase-util:${commonsVersion}"
            dependency "com.epam.deltix:timebase-messages:${commonsVersion}"
            dependency "com.epam.deltix:timebase-collections:${commonsVersion}"

            dependency 'com.epam.deltix:dfp:0.11.19'
            dependency 'com.epam.deltix:hd-date-time:0.2.11'

            dependency 'com.epam.deltix:thread-affinity:1.0.4'

            //dependency 'deltix:deltix-spring-api-keys:0.1.4'

            // spring boot tests
            dependency 'org.springframework.boot:spring-boot-starter-test:2.2.7.RELEASE'
            dependency 'org.junit.jupiter:junit-jupiter-api:5.5.2'
            //dependency 'com.nimbusds:oauth2-oidc-sdk:6.14'

            dependency 'org.hdrhistogram:HdrHistogram:2.1.10'
            dependency 'org.slf4j:slf4j-api:1.7.25'

            // resolving conflicts
            dependency 'com.squareup.okhttp3:okhttp:3.3.1'
            dependency 'net.minidev:json-smart:2.3'

            dependency 'commons-logging:commons-logging:1.2'
            dependency 'commons-cli:commons-cli:1.4'
            dependency 'commons-codec:commons-codec:1.13'
            dependency 'commons-io:commons-io:2.6'

            dependency 'com.google.guava:guava:30.1.1-jre'
            dependency 'com.google.code.gson:gson:2.8.9'
            dependency 'com.google.code.findbugs:jsr305:3.0.2'
            dependency 'com.google.code.findbugs:annotations:3.0.1'

            dependency 'org.apache.commons:commons-compress:1.21'
            dependency 'org.apache.commons:commons-lang3:3.7'
            dependency 'org.apache.commons:commons-math3:3.6'
            dependency 'org.apache.commons:commons-text:1.8'


            dependencySet(group: 'com.fasterxml.jackson.core', version: '2.12.7') {
                entry 'jackson-databind'
                entry 'jackson-core'
                entry 'jackson-annotations'
            }

            dependencySet(group: 'org.springframework', version: '5.2.22.RELEASE') {
                entry 'spring-beans'
                entry 'spring-core'
                entry 'spring-context'
                entry 'spring-web'
                entry 'spring-webmvc'
                entry 'spring-messaging'
                entry 'spring-aop'
                entry 'spring-aop'
                entry 'spring-expression'
            }

            dependencySet(group: 'org.springframework.boot', version: '2.2.13.RELEASE') {
                entry 'spring-boot'
                entry 'spring-boot-starter'
                entry 'spring-boot-autoconfigure'
                entry 'spring-boot-starter-web'
                entry 'spring-boot-starter-websocket'
                entry 'spring-boot-starter-actuator'
                entry 'spring-boot-configuration-processor'
            }

            dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.43') {
                entry 'tomcat-embed-core'
                entry 'tomcat-embed-websocket'
                entry 'tomcat-embed-el'
            }

            dependencySet(group: 'org.springframework.security', version: '5.2.11.RELEASE') {
                entry 'spring-security-web'
                entry 'spring-security-messaging'
                entry 'spring-security-core'
                entry 'spring-security-config'
                entry 'spring-security-oauth2'
                entry 'spring-security-oauth2-client'
                entry 'spring-security-oauth2-resource-server'
                entry 'spring-security-oauth2-jose'
            }

            dependency 'org.springframework.security.oauth:spring-security-oauth2:2.5.1.RELEASE'
            dependency 'org.springframework.security:spring-security-jwt:1.1.0.RELEASE'

            dependency 'org.yaml:snakeyaml:1.26'
            dependency 'com.nimbusds:nimbus-jose-jwt:7.9'

            dependencySet(group: 'com.epam.deltix', version: '3.0.1') {
                entry 'gflog-api'
                entry 'gflog-core'
                entry 'gflog-jul'
                entry 'gflog-dcl'
                entry 'gflog-slf4j'
            }

            dependency 'org.testcontainers:testcontainers:1.16.2'
            dependency 'org.testcontainers:junit-jupiter:1.16.2'

            dependency 'javax.annotation:javax.annotation-api:1.3.2'

            dependency 'org.reflections:reflections:0.9.11'
            dependency 'org.asynchttpclient:async-http-client:2.10.4'

            dependency 'junit:junit:4.13.1'

            dependency 'io.reactivex.rxjava2:rxjava:2.1.14'

            dependency 'net.java.dev.jna:jna:5.8.0'
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set('sources')
        archiveBaseName.set(archivesBaseName)
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
        archiveBaseName.set(archivesBaseName)
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    test {
        ignoreFailures Boolean.getBoolean("test.ignoreFailures")
        reports.junitXml.enabled = true

        doLast {
            copy {
                from reports.junitXml.getDestination() include {"*.xml"}
                into file("$rootDir/build/reports/tests/xml")
            }
        }
    }
}

def testTasks = javaProjects*.test

task generateTestReport(type: TestReport) {
    reportOn testTasks
    description "Executes tests for all Java projects and generates merged test report"
    destinationDir = file("$rootDir/build/reports/tests/html/all_reports_merged") // TODO: Pick better name for merged report
}

build.dependsOn generateTestReport
