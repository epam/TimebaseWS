import org.springframework.boot.gradle.tasks.bundling.BootJar

//archivesBaseName = 'timebase-ws-server'

apply plugin: "com.webcohesion.enunciate"
apply plugin: 'io.freefair.lombok'

configurations.implementation {
    exclude group: 'jakarta.annotation', module: 'jakarta.annotation-api' // GNU license, why it's used in 'compile' dependencies?
}

dependencies {

    implementation project(":web:frontend"),
            project(":java:timebase-ws-messages"),
            project(":java:timebase-grafana-api"),
            project(":java:timebase-api-keys"),
            project(":java:timebase-grafana-api-impl"),
            project(":java:timebase-grafana-basicmath")

    // Timebase Client
    api("org.finos.timebase-ce:timebase-client") {
        exclude group: 'org.finos.timebase-ce', module: 'timebase-s3'
    }

    // Timebase Commons
    implementation "com.epam.deltix:timebase-lang"
    implementation "com.epam.deltix:timebase-util"
    implementation "com.epam.deltix:timebase-messages"
    implementation "com.epam.deltix:timebase-collections"

    implementation 'com.epam.deltix:orderbook-core'

    implementation 'org.reflections:reflections'

    compileOnly 'com.google.code.findbugs:jsr305'
    compileOnly 'com.google.code.findbugs:annotations'

    implementation 'com.epam.deltix:containers'
    implementation 'com.epam.deltix:thread-affinity'

    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.apache.commons:commons-compress'

    implementation 'javax.annotation:javax.annotation-api'

    api 'com.epam.deltix:gflog-api'
    api 'com.epam.deltix:gflog-core'
    api 'com.epam.deltix:gflog-jul'

    implementation 'org.modelmapper:modelmapper'

    implementation 'org.hdrhistogram:HdrHistogram'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-core'

    implementation 'com.google.code.gson:gson'
    implementation 'com.google.guava:guava'
    implementation 'commons-io:commons-io'

    implementation 'org.asynchttpclient:async-http-client'

    implementation "org.springframework.boot:spring-boot-starter"
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springframework.security.oauth:spring-security-oauth2'

    implementation 'org.springframework.security:spring-security-config',
            'org.springframework.security:spring-security-web',
            'org.springframework.security:spring-security-messaging',
            'org.springframework.security:spring-security-oauth2-client',
            'org.springframework.security:spring-security-oauth2-resource-server',
            'org.springframework.security:spring-security-oauth2-jose'

    implementation 'org.springframework.security:spring-security-jwt'

    implementation 'com.intellij:annotations:12.0'

    implementation 'io.reactivex.rxjava2:rxjava'

//    implementation 'deltix:deltix-spring-api-keys'

//    implementation 'io.reactivex.rxjava2:rxjava'
//    implementation 'deltix:deltix-timebase-api-rx'
//    implementation        'deltix:transformation-api'

    compileOnly 'com.webcohesion.enunciate:enunciate-core-annotations'

    testImplementation 'com.google.code.findbugs:annotations'

    testImplementation "junit:junit",
            'org.springframework.boot:spring-boot-starter-test',
            'org.junit.jupiter:junit-jupiter-api',
            'commons-io:commons-io'

    //testImplementation 'org.finos.timebase-ce:timebase-server'

    testImplementation 'org.glassfish.tyrus:tyrus-client:1.13.1'
    testImplementation 'org.glassfish.tyrus:tyrus-server:1.13.1'
    testImplementation 'org.glassfish.tyrus:tyrus-container-grizzly-client:1.13.1'
    testImplementation 'org.glassfish.tyrus:tyrus-container-grizzly-server:1.13.1'

    testImplementation "org.testcontainers:testcontainers"
    testImplementation "org.testcontainers:junit-jupiter"

//    testCompile group: 'ch.netzwerg', name: 'paleo-core', version: '0.13.2'
//    testCompile 'io.github.swagger2markup:swagger2markup:1.3.3'

    //testCompile     'org.mockito:mockito-core:1.10.19'


    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

licenseReport {
    // prepare allowed licenses

//    for (nl.javadude.gradle.plugins.license.LicenseMetadata a in downloadLicenses.allowedLicenses) {
//        println()
//
//        def names = downloadLicenses.aliases.get(a)
//        for (name in names) {
//            if (name instanceof String)
//                println("{\"moduleLicense\": \"" + name + "\"},")
//            else if (name instanceof nl.javadude.gradle.plugins.license.LicenseMetadata)
//                println("{\"moduleLicense\": \"" + name.licenseName + "\"},")
//        }
//    }

    excludeGroups = ['javax.servlet.*']
    excludes = ['asm:asm',
                'com.sun.codemodel:codemodel-project',
                'net.jcip:jcip-annotations',
                'com.fasterxml.jackson:jackson-bom']

    configurations = ['runtimeClasspath']
    allowedLicensesFile = new File("$rootDir/allowed-licenses.json")
}

tasks.enunciate {
    enabled = false
    File outDir = file("${buildDir}/../docs/rest")
    doFirst {
        outDir.deleteDir()
        outDir.mkdirs()
    }
    export("docs", outDir)
}

tasks.enunciate.dependsOn javadoc

task    devguide(type: Zip, dependsOn: enunciate) {
    archiveFileName = "devguide.zip"
    destinationDirectory.dir("${rootDir}/docs")

    from ("${buildDir}/docs") {
        include "*"
        include "**/*"
    }
    from ("${rootDir}/docs") {
        include '*.html'
    }

    doLast {
        println "Created documentation [$archiveName] in [$destinationDir]"
    }
}

jar {
    enabled = false
}

artifacts {
    archives devguide
}

javadoc {
    // skip processing enunciate tags
    options.tags = [ "responseExample", "pathExample", "label" ]
}

def bootGroup = 'boot'

task bootJar(type: BootJar, dependsOn: enunciate, group: bootGroup) {

    mainClass.set('com.epam.deltix.tbwg.webapp.Application')

    manifest {
        attributes(
                "Implementation-Title": archivesBaseName,
                "Implementation-Version": findProperty("version")
        )
    }

    classpath {
        sourceSets.main.runtimeClasspath
    }

    from("${rootDir}/docs/") {
        into 'static/api/v0/docs'
    }
    from("${buildDir}/docs/rest") {
        into 'static/api/v0/docs/rest'
    }

}

configurations.all {
    resolutionStrategy {
        // fail eagerly on version conflict (includes transitive dependencies)
        // e.g. multiple different versions of the same dependency (group and name are equal)
         failOnVersionConflict()
    }
    exclude group: 'ch.qos.logback' // we use GFlogger binding for SL4J instead of logback
}

task    distribution(type: Zip, dependsOn: bootJar) {

    // [baseName]-[appendix]-[version]-[classifier].[extension]
    archiveVersion.set("")
    archiveClassifier.set("distribution")

    destinationDirectory.set(file("${rootDir}/distribution"))

    from ("${buildDir}") {
        include "docs/*"
        include "docs/**/*"
    }
    from ("${rootDir}") {
        include 'docs/*.html'
    }

    from ("${buildDir}/libs") {
        include "*${project.version}.jar"
    }
    from ("${buildDir}/resources/main") {
        include "*.yaml"
    }

    doLast {
        println "Created distribution package [$archiveName] in [$destinationDir]"
    }
}

//task    pushDistribution(type: Exec, dependsOn: distribution) {
//
//    // without this closure path variable is incorrect!
//    doFirst {
//        def path = distribution.getArchiveFile().get().getAsFile().getAbsolutePath().toString()
//        println "pushing package ${path} under account ${rootProject.ext.publisherUser}"
//
//        commandLine "curl", "--silent", "--show-error", "--fail",
//                "https://artifactory.epam.com/artifactory/EPM-RTC/QuantServer/TBWG/${version}/${distribution.archiveFileName.get()}",
//                "--user", "${rootProject.ext.publisherUser}:${rootProject.ext.publisherPassword}",
//                "--upload-file", "${path}"
//
//        //commandLine "cmd a ${apath}"
//    }
//}

ext {
    dockerImageName = 'timebase-ws-server'
}

task prepareFilesForDocker(type: Copy, dependsOn: distribution) {
    group 'docker'
    dependsOn ':build'

    def zipFile = file("${rootDir}/distribution/timebase-ws-server-distribution.zip")
    def outputDir = file("${buildDir}/docker/ws-server")

    from zipTree(zipFile)
    into outputDir
}

task bootRunJar(dependsOn: bootJar, type: JavaExec, group: bootGroup) {
    jvmArgs = ["-Dfile.encoding=UTF-8"]
    main="-jar"
    args = [bootJar.getArchiveFile().get()]
}

task bootRun(dependsOn: bootJar, type: JavaExec, group: bootGroup) {
    jvmArgs = ["-Dfile.encoding=UTF-8"]
    main="-jar"
    args = [bootJar.getArchiveFile().get()]
}

build.dependsOn bootJar
